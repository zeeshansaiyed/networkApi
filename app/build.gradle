apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def compileTargetSdkVersion() {
    if (project.hasProperty('compileSdkVersion')) return rootProject.ext.compileSdkVersion else return 28
}

def supportLibVersion() {
    if (project.hasProperty('supportLibVersion')) return rootProject.ext.supportLibVersion else return '28.0.0'
}

def kotlinVersion() {
    if (project.hasProperty('kotlin_version')) return rootProject.ext.kotlin_version else return '1.3.31'
}

def retrofitVersion() {
    if (project.hasProperty('retrofitVersion')) return rootProject.ext.retrofitVersion else return '2.3.0'
}

def okhttpVersion() {
    if (project.hasProperty('okhttpVersion')) return rootProject.ext.okhttpVersion else return '3.9.0'
}

def coroutineVersion() {
    if (project.hasProperty('coroutineVersion')) return rootProject.ext.coroutineVersion else return '1.2.1'
}

def Api() {
    if (project.hasProperty('api')) return rootProject.ext.api else return ''
}

def message() {
    if (project.hasProperty('messageKey')) return rootProject.ext.messageKey else return "\"message\""
}

def status() {
    if (project.hasProperty('statusKey')) return rootProject.ext.statusKey else return "\"code\""
}

ext {
    bintrayRepo = 'network_api'
    bintrayName = 'com.zee.networkapi'

    libraryName = 'network_api'

    publishedGroupId = 'com.zee.networkapi'
    artifact = 'network_api'
    libraryVersion = project.versionName

    libraryDescription = "Network api Library based on co-routines."

    siteUrl = 'https://github.com/zeeshansaiyed/networkApi'
    gitUrl = 'https://github.com/zeeshansaiyed/networkApi.git'

    developerId = 'zeeshansaiyed'
    developerName = 'Zeeshan Saiyed'
    developerEmail = 'crazymind.zeeshan@rocketmail.com'

    licenseName = 'GNU GENERAL PUBLIC LICENSE'
    licenseUrl = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
    allLicenses = ["GPL-3.0"]
}

android {
    compileSdkVersion compileTargetSdkVersion()
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion compileTargetSdkVersion()
        versionCode project.versionCode.toInteger()
        versionName project.versionName

        buildConfigField "String", "WebServiceUrl", Api()
        buildConfigField "String", "message", message()
        buildConfigField "String", "status", status()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:${supportLibVersion()}"
    //Kotlin
    api "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion()}"
    //Retrofit
    api "com.squareup.retrofit2:retrofit:${retrofitVersion()}"
    api "com.squareup.retrofit2:converter-gson:${retrofitVersion()}"
    api 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    api 'com.squareup.retrofit2:converter-moshi:2.5.0'
    //OkHttp
    api "com.squareup.okhttp3:okhttp:${okhttpVersion()}"
    api "com.squareup.okhttp3:logging-interceptor:${okhttpVersion()}"
    api "com.squareup.okhttp3:okhttp-urlconnection:${okhttpVersion()}"
    //Co-routine
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutineVersion()}"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutineVersion()}"
}


repositories {
    mavenCentral()
}

if (project.rootProject.file('local.properties').exists()) {
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
}
